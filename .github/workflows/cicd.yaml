name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - dev
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    env:
      FLASK_SECRET_KEY: ${{ secrets.FLASK_SECRET_KEY }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m venv venv
          venv/bin/pip install -r requirements.txt
          venv/bin/pip install pytest flake8 bandit safety
          pip install --upgrade jinja2

      - name: Run Unit Tests
        run: |
          venv/bin/python -m pytest

      - name: Lint Test with Flake8
        run: |
          venv/bin/python -m flake8 . --exclude=venv --ignore=F811,F841

     # Security Check - Static Code Analysis  
      - name: Run Bandit Security Check
        run: |
          source venv/bin/activate
          bandit -r . --exclude venv || true
      
      # Security Check - Dependency Vulnerability Scanning (ignore jinja vuln)
      # - name: Run Safety Check for Vulnerabilities
      #   run: |
      #     source venv/bin/activate
      #     safety check --ignore=70612 

  build_and_push_docker_image:
    needs: build_and_test
    runs-on: ubuntu-latest
    env: 
      FLASK_SECRET_KEY: ${{ secrets.FLASK_SECRET_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set environment variables based on branch
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY_PROD }}" >> $GITHUB_ENV
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          else
            echo "ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY_DEV }}" >> $GITHUB_ENV
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          fi

      - name: Set IMAGE_TAG to latest
        run: echo "IMAGE_TAG=latest" >> $GITHUB_ENV

      - name: Build and tag Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/dev-lab:latest
          build-args: |
            FLASK_SECRET_KEY=${{ secrets.FLASK_SECRET_KEY }}
        # run: |
        #   docker build --build-arg FLASK_SECRET_KEY=${{ secrets.FLASK_SECRET_KEY }} -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:latest .
    
      # Security Check - Container Vulnerability Scan
      - name: Run Trivy Image Scan
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest \
          image --severity HIGH,CRITICAL ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:latest

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:latest
          echo "image=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:latest" >> "$GITHUB_OUTPUT"

  setup_roles:
    needs: build_and_push_docker_image
    name: Setup roles
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    # outputs:
    #   env-name: ${{ steps.env-name.outputs.environment }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy cloudformation setup template
      run: |
        aws cloudformation deploy \
        --stack-name github-actions-cloudformation-deploy-setup \
        --template-file cloudformation-templates/setup.yaml \
        --capabilities CAPABILITY_NAMED_IAM \
        --region ${{ secrets.AWS_REGION }} \
        --parameter-overrides GitHubOrg=full2cloud RepositoryName=${{ github.repository }} 

  deploy-infrastructure:
    needs: setup_roles
    name: Deploy infrastructure
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      env-name: ${{ steps.env-name.outputs.environment }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4


    # The "environment name" is used as the base for CloudFormation stack names,
    # and is derived from the GitHub repository name.
    # For example, the repo 'Octocat/Hello-World' would have the environment name
    # 'Octocat-Hello-World' and would deploy a stack name 'Octocat-Hello-World-ecr-repo'.
    - name: Configure environment name
      id: env-name
      env:
        REPO: ${{ github.repository }}
      run: |
        ENVIRONMENT=`echo $REPO | tr "/" "-"`
        echo "Environment name: $ENVIRONMENT"
        echo "environment=$ENVIRONMENT" >> "$GITHUB_OUTPUT"

    - name: Configure AWS credentials
      id: creds
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Retrieve default VPC ID and public subnets
      id: vpc
      run: |
        VPC_ID=`aws ec2 describe-vpcs --filters "Name=isDefault, Values=true" --query 'Vpcs[].VpcId' --output text`
        echo "vpc-id=$VPC_ID" >> "$GITHUB_OUTPUT"

        SUBNET_1=`aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" "Name=default-for-az,Values=true" --query 'Subnets[0].SubnetId' --output text`
        echo "subnet-one=$SUBNET_1" >> "$GITHUB_OUTPUT"

        SUBNET_2=`aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" "Name=default-for-az,Values=true" --query 'Subnets[1].SubnetId' --output text`
        echo "subnet-two=$SUBNET_2" >> "$GITHUB_OUTPUT"

    - name: Retrieve cluster VPC ID and subnets. 
      id: cluster-vpc
      run: |
        CLUSTER_VPC_ID=`aws ec2 describe-vpcs --filters "Name=isDefault, Values=false" --query 'Vpcs[].VpcId' --output text`
        echo "cluster-vpc-id=$CLUSTER_VPC_ID" >> "$GITHUB_OUTPUT"

        SUBNET_PUB_1=`aws ec2 describe-subnets --filters "Name=vpc-id,Values=$CLUSTER_VPC_ID"  "Name=map-public-ip-on-launch, Values=true" --query 'Subnets[0].SubnetId' --output text`
        echo "subnet-pub-one=$SUBNET_PUB_1" >> "$GITHUB_OUTPUT"

        SUBNET_PUB_2=`aws ec2 describe-subnets --filters "Name=vpc-id,Values=$CLUSTER_VPC_ID" "Name=map-public-ip-on-launch, Values=true"  --query 'Subnets[1].SubnetId' --output text`
        echo "subnet-pub-two=$SUBNET_PUB_2" >> "$GITHUB_OUTPUT" 

        SUBNET_PRIV_1=`aws ec2 describe-subnets --filters "Name=vpc-id,Values=$CLUSTER_VPC_ID" "Name=map-public-ip-on-launch, Values=false"  --query 'Subnets[0].SubnetId' --output text`
        echo "subnet-priv-one=$SUBNET_PRIV_1" >> "$GITHUB_OUTPUT" 
        
        SUBNET_PRIV_2=`aws ec2 describe-subnets --filters "Name=vpc-id,Values=$CLUSTER_VPC_ID" "Name=map-public-ip-on-launch, Values=false"  --query 'Subnets[1].SubnetId' --output text`
        echo "subnet-priv-two=$SUBNET_PRIV_2" >> "$GITHUB_OUTPUT" 

    - name: Deploy infrastructure with CloudFormation
      id: infrastructure-stack
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: ${{ steps.env-name.outputs.environment }}-infra
        template: cloudformation-templates/infrastructure.yaml
        role-arn: arn:aws:iam::${{ steps.creds.outputs.aws-account-id }}:role/github-actions-cloudformation-stack-role
        no-fail-on-empty-changeset: "1"
        parameter-overrides: >-
          EnvironmentName=${{ steps.env-name.outputs.environment }},
          VPC=${{ steps.vpc.outputs.vpc-id }},
          PublicSubnetOne=${{ steps.vpc.outputs.subnet-one }},
          PublicSubnetTwo=${{ steps.vpc.outputs.subnet-two }}

    - name: Deploy EKS cluster with CloudFormation
      id: cluster-stack
      uses: aws-actions/aws-cloudformation-github-deploy@v1.3.0
      with:
        name: ${{ steps.env-name.outputs.environment }}-eks-cluster
        template: cloudformation-templates/eks.yaml
        no-fail-on-empty-changeset: "1"
        capabilities: 'CAPABILITY_NAMED_IAM'
        parameter-overrides: >-
          EnvironmentName=${{ steps.env-name.outputs.environment }},
          VPC=${{ steps.cluster-vpc.outputs.cluster-vpc-id }},
          PublicSubnetOne=${{ steps.cluster-vpc.outputs.subnet-pub-one }},
          PublicSubnetTwo=${{ steps.cluster-vpc.outputs.subnet-pub-two }},
          PrivateSubnetOne=${{ steps.cluster-vpc.outputs.subnet-priv-one }},
          PrivateSubnetTwo=${{ steps.cluster-vpc.outputs.subnet-priv-two }}

    # - name: Deploy worker nodes
    #   id: worker-nodes
    #   uses: aws-actions/aws-cloudformation-github-deploy@v1
    #   with:
    #     name: ${{ steps.env-name.outputs.environment }}-nodes
    #     no-fail-on-empty-changeset: "1"
    #     capabilities: 'CAPABILITY_NAMED_IAM'
    #     template: cloudformation-templates/worker-nodes.yaml
        # parameter-overrides: >-
        #   EnvironmentName=${{ steps.env-name.outputs.environment }},
        #   VpcId=${{ steps.cluster-vpc.outputs.cluster-vpc-id }},
        #   Subnets=${{ steps.cluster-vpc.outputs.subnet-priv-one }},${{ steps.cluster-vpc.outputs.subnet-priv-two }}


 
  deploy_k8s:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get Last Commit SHA
        id: get_last_commit
        run: echo "LAST_COMMIT_SHA=${{ github.sha }}" >> $GITHUB_ENV

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Install kubectl
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Check kubectl version
        run: kubectl version --client

      - name: Update Kubeconfig for EKS Cluster
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            CLUSTER_NAME=eks-demo
          else
            CLUSTER_NAME=eks-demo
          fi
          aws eks update-kubeconfig --name $CLUSTER_NAME --region ${{ secrets.AWS_REGION }}

      - name: Make update-k8s-yaml.sh executable
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REGION: ${{ secrets.AWS_REGION }}
        run: chmod +x ./kubernetes/update-k8s-yaml.sh

      - name: Update Kubernetes Deployment YAML
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REGION: ${{ secrets.AWS_REGION }}
        run: ./kubernetes/update-k8s-yaml.sh 

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f ./kubernetes/deployment.yaml

      - name: Create ImagePullSecret
        run: |
          kubectl get secret merck-secret || \
          kubectl create secret docker-registry merck-secret \
           --docker-server=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com \
           --docker-username=AWS \
           --docker-password=$(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) \
           --docker-email=${{ secrets.MY_AWS_EMAIL }}

      - name: Deploy to Service Kubernetes
        run: |
          kubectl apply -f ./kubernetes/service.yaml

      - name: Get Kubernetes Pods
        run: |
          echo "Getting Kubernetes pods..."
          kubectl get pods -o wide

      - name: Get Kubernetes Service
        run: |
          echo "Getting Kubernetes service..."
          kubectl get svc

      - name: Describe Kubernetes Pods
        run: |
          echo "Describing Kubernetes pods..."
          kubectl describe pods

      - name: Get Kubernetes Nodes
        run: |
          echo "Getting Kubernetes nodes..."
          kubectl get nodes -o wide